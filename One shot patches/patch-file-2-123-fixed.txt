{
  "patches": [
    {
      "file": "src/routes/feed/+page.svelte",
      "action": "create",
      "content": "<script lang=\"ts\">\n    import { getContext } from 'svelte';\n    import { onMount } from 'svelte';\n    import type { AppContext } from '$lib/context/app.svelte';\n    import type { MusicContext } from '$lib/context/music.svelte';\n    import { fade, fly } from 'svelte/transition';\n    import Header from '$lib/components/layout/Header.svelte';\n    import StandardLayout from '$lib/components/layout/StandardLayout.svelte';\n\n    const app = getContext<() => AppContext>('app')();\n    const music = getContext<() => MusicContext>('music')();\n    \n    // When the feed is accessed after completing orientation\n    // mark the orientation as complete in the app context\n    onMount(() => {\n        if (music.selectedAlbums.length === 3 && \n            music.selectedSongsCount >= 9 && \n            !app.state.hasCompletedOrientation) {\n            app.completeOrientation();\n        }\n    });\n\n    // Set up feed data\n    const feedItems = $state([\n        {\n            id: 1,\n            type: 'welcome',\n            timestamp: new Date(),\n            content: 'Welcome to your Swiftie feed! Here you\\'ll see updates, activities, and content tailored to your favorites.'\n        },\n        {\n            id: 2,\n            type: 'activity',\n            timestamp: new Date(Date.now() - 1000 * 60 * 5), // 5 minutes ago\n            user: 'TaylorFan2013',\n            action: 'created a new list',\n            content: 'Top 10 Taylor Swift Bridges'\n        },\n        {\n            id: 3,\n            type: 'suggestion',\n            timestamp: new Date(Date.now() - 1000 * 60 * 30), // 30 minutes ago\n            content: 'Try the List Keeper to create your own custom rankings!'\n        }\n    ]);\n\n    function formatTime(date: Date): string {\n        const now = new Date();\n        const diffMs = now.getTime() - date.getTime();\n        const diffMins = Math.floor(diffMs / (1000 * 60));\n        \n        if (diffMins < 1) return 'just now';\n        if (diffMins < 60) return `${diffMins} minute${diffMins === 1 ? '' : 's'} ago`;\n        \n        const diffHours = Math.floor(diffMins / 60);\n        if (diffHours < 24) return `${diffHours} hour${diffHours === 1 ? '' : 's'} ago`;\n        \n        const diffDays = Math.floor(diffHours / 24);\n        return `${diffDays} day${diffDays === 1 ? '' : 's'} ago`;\n    }\n</script>\n\n<div class=\"feed-page\">\n    <Header \n        title=\"Feed\"\n        subtitle=\"Latest Swiftie updates\" />\n\n    <main class=\"feed-container\">\n        <div class=\"welcome-card\" in:fly={{y: 20, duration: 400}}>\n            <h2>Welcome, Swiftie!</h2>\n            <p>\n                {#if music.selectedAlbums.length > 0}\n                    Based on your album selections, we think you'll love these activities and updates.\n                {:else}\n                    Discover Taylor Swift content, create lists, and connect with other fans.\n                {/if}\n            </p>\n        </div>\n\n        {#each feedItems as item, i (item.id)}\n            <div class=\"feed-item\" in:fly={{y: 20, duration: 400, delay: 200 + (i * 100)}}>\n                {#if item.type === 'welcome'}\n                    <div class=\"welcome-item\">\n                        <div class=\"item-icon\">ðŸ“£</div>\n                        <div class=\"item-content\">\n                            <p>{item.content}</p>\n                            <span class=\"timestamp\">{formatTime(item.timestamp)}</span>\n                        </div>\n                    </div>\n                {:else if item.type === 'activity'}\n                    <div class=\"activity-item\">\n                        <div class=\"item-icon\">ðŸ‘¤</div>\n                        <div class=\"item-content\">\n                            <p><span class=\"username\">{item.user}</span> {item.action}</p>\n                            <p class=\"content-preview\">\"{item.content}\"</p>\n                            <span class=\"timestamp\">{formatTime(item.timestamp)}</span>\n                        </div>\n                    </div>\n                {:else if item.type === 'suggestion'}\n                    <div class=\"suggestion-item\">\n                        <div class=\"item-icon\">ðŸ’¡</div>\n                        <div class=\"item-content\">\n                            <p>{item.content}</p>\n                            <span class=\"timestamp\">{formatTime(item.timestamp)}</span>\n                        </div>\n                    </div>\n                {/if}\n            </div>\n        {/each}\n\n        {#if feedItems.length === 0}\n            <div class=\"empty-feed\" in:fade={{duration: 300}}>\n                <p>No updates yet. Check back soon!</p>\n            </div>\n        {/if}\n    </main>\n</div>\n\n<style>\n    .feed-page {\n        display: flex;\n        flex-direction: column;\n        height: 100%;\n    }\n    \n    .feed-container {\n        padding: var(--dynamic-spacing-md);\n        display: flex;\n        flex-direction: column;\n        gap: var(--dynamic-spacing-md);\n        overflow-y: auto;\n        flex: 1;\n    }\n    \n    .welcome-card {\n        background-color: var(--color-primary-alpha);\n        border-radius: var(--radius-lg);\n        padding: var(--dynamic-spacing-md);\n        color: var(--text-primary);\n        box-shadow: var(--shadow-sm);\n    }\n    \n    .welcome-card h2 {\n        margin: 0 0 0.5rem 0;\n        font-size: 1.25rem;\n    }\n    \n    .welcome-card p {\n        margin: 0;\n        font-size: 0.9rem;\n        line-height: 1.4;\n    }\n    \n    .feed-item {\n        background-color: white;\n        border-radius: var(--radius-lg);\n        padding: var(--dynamic-spacing-md);\n        box-shadow: var(--shadow-sm);\n    }\n    \n    .welcome-item,\n    .activity-item,\n    .suggestion-item {\n        display: flex;\n        gap: 1rem;\n        align-items: flex-start;\n    }\n    \n    .item-icon {\n        width: 2.5rem;\n        height: 2.5rem;\n        display: flex;\n        align-items: center;\n        justify-content: center;\n        background-color: var(--bg-gradient-start);\n        border-radius: 50%;\n        font-size: 1.25rem;\n        flex-shrink: 0;\n    }\n    \n    .item-content {\n        flex: 1;\n    }\n    \n    .item-content p {\n        margin: 0 0 0.5rem 0;\n        font-size: 0.9rem;\n        line-height: 1.4;\n    }\n    \n    .username {\n        font-weight: 600;\n        color: var(--text-primary);\n    }\n    \n    .content-preview {\n        font-style: italic;\n        color: var(--text-secondary);\n    }\n    \n    .timestamp {\n        font-size: 0.75rem;\n        color: var(--text-secondary);\n    }\n    \n    .empty-feed {\n        text-align: center;\n        padding: 2rem;\n        color: var(--text-secondary);\n    }\n</style>"
    },
    {
      "file": "src/routes/swiftivities/+page.svelte",
      "action": "create",
      "content": "<script lang=\"ts\">\n    import { getContext } from 'svelte';\n    import type { AppContext } from '$lib/context/app.svelte';\n    import { goto } from '$app/navigation';\n    import { base } from '$app/paths';\n    import { fly } from 'svelte/transition';\n    import StandardLayout from '$lib/components/layout/StandardLayout.svelte';\n    import Header from '$lib/components/layout/Header.svelte';\n    import Footer from '$lib/components/layout/Footer.svelte';\n    import Button from '$lib/components/Button/Button.svelte';\n\n    const app = getContext<() => AppContext>('app')();\n\n    // Activity types for the Swiftivities section\n    const activities = [\n        {\n            id: 'list-keeper',\n            title: 'List Keeper',\n            description: 'Create and share ranked lists of albums, songs, and more',\n            icon: 'ðŸ“‹',\n            color: '#F4E5B2', // Fearless yellow\n            path: `${base}/list-keeper`\n        },\n        {\n            id: 'musings',\n            title: 'Musings',\n            description: 'Share your thoughts on lyrics, themes, and eras',\n            icon: 'ðŸ’­',\n            color: '#D1A0A2', // Speak Now purple-pink\n            path: `${base}/musings`\n        },\n        {\n            id: 'besties',\n            title: 'Besties',\n            description: 'Find and connect with Swifties who share your taste',\n            icon: 'ðŸ‘¯',\n            color: '#E8C1E1', // Lover pink\n            path: `${base}/besties`\n        },\n        {\n            id: 'frenemies',\n            title: 'Frenemies',\n            description: 'Debate with those who have completely different opinions',\n            icon: 'ðŸ”¥',\n            color: '#B02428', // Red red\n            path: `${base}/frenemies`\n        }\n    ];\n\n    function navigateToActivity(path: string) {\n        goto(path);\n    }\n</script>\n\n<div class=\"swiftivities-page\">\n    <Header \n        title=\"Swiftivities\"\n        subtitle=\"Fun Taylor-inspired activities\" />\n\n    <main class=\"activities-container\">\n        {#each activities as activity, i}\n            <div \n                class=\"activity-card\" \n                style=\"background-color: {activity.color}36;\" \n                in:fly={{y: 20, duration: 400, delay: i * 100}}\n                on:click={() => navigateToActivity(activity.path)}\n            >\n                <div class=\"activity-icon\" style=\"background-color: {activity.color};\">\n                    <span>{activity.icon}</span>\n                </div>\n                <div class=\"activity-content\">\n                    <h3>{activity.title}</h3>\n                    <p>{activity.description}</p>\n                </div>\n            </div>\n        {/each}\n    </main>\n\n    <Footer>\n        <p class=\"footer-text\">\n            More activities coming soon!\n        </p>\n    </Footer>\n</div>\n\n<style>\n    .swiftivities-page {\n        display: flex;\n        flex-direction: column;\n        height: 100%;\n    }\n\n    .activities-container {\n        padding: var(--dynamic-spacing-md);\n        display: grid;\n        grid-template-columns: repeat(auto-fit, minmax(280px, 1fr));\n        gap: var(--dynamic-spacing-md);\n        overflow-y: auto;\n        flex: 1;\n    }\n\n    .activity-card {\n        border-radius: var(--radius-lg);\n        padding: var(--dynamic-spacing-md);\n        display: flex;\n        align-items: flex-start;\n        gap: 1rem;\n        cursor: pointer;\n        transition: transform 0.2s ease, box-shadow 0.2s ease;\n        box-shadow: var(--shadow-sm);\n    }\n\n    .activity-card:hover {\n        transform: translateY(-2px);\n        box-shadow: var(--shadow-md);\n    }\n\n    .activity-icon {\n        width: 3rem;\n        height: 3rem;\n        border-radius: 50%;\n        display: flex;\n        align-items: center;\n        justify-content: center;\n        font-size: 1.5rem;\n    }\n\n    .activity-content {\n        flex: 1;\n    }\n\n    .activity-content h3 {\n        margin: 0 0 0.5rem 0;\n        font-size: 1.1rem;\n        color: var(--text-primary);\n    }\n\n    .activity-content p {\n        margin: 0;\n        font-size: 0.9rem;\n        color: var(--text-secondary);\n        line-height: 1.4;\n    }\n\n    .footer-text {\n        text-align: center;\n        color: var(--text-secondary);\n        font-size: 0.9rem;\n        margin: 0;\n    }\n</style>"
    }
  ]
}
