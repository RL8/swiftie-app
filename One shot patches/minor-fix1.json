{
  "patches": [
    {
      "file": "src/routes/albums/results/+page.svelte",
      "action": "update",
      "content": "<script lang=\"ts\">\n    import { getContext } from 'svelte';\n    import type { MusicContext } from '$lib/context/music.svelte';\n    import { goto } from '$app/navigation';\n    import { base } from '$app/paths';\n    import { onMount } from 'svelte';\n    import confetti from 'canvas-confetti';\n    import { fade, fly } from 'svelte/transition';\n    import Header from '$lib/components/layout/Header.svelte';\n    import Footer from '$lib/components/layout/Footer.svelte';\n    import Button from '$lib/components/Button/Button.svelte';\n    import StandardLayout from '$lib/components/layout/StandardLayout.svelte';\n    import VinylRecord from '$lib/components/music/VinylRecord.svelte';\n\n    const music = getContext<() => MusicContext>('music')();\n\n    function handleProceed() {\n        goto(`${base}/feed`);\n    }\n\n    function isColorLight(color: string) {\n        const hex = color.replace('#', '');\n        const r = parseInt(hex.substr(0, 2), 16);\n        const g = parseInt(hex.substr(2, 2), 16);\n        const b = parseInt(hex.substr(4, 2), 16);\n        const brightness = (r * 299 + g * 587 + b * 114) / 1000;\n        return brightness > 155;\n    }\n\n    let mounted = $state(false);\n    let showAlbum1 = $state(false);\n    let showAlbum2 = $state(false);\n    let showAlbum3 = $state(false);\n\n    onMount(() => {\n        mounted = true;\n        \n        // Start animation sequence after a short delay\n        setTimeout(() => {\n            showAlbum1 = true;\n            \n            setTimeout(() => {\n                showAlbum2 = true;\n                \n                setTimeout(() => {\n                    showAlbum3 = true;\n                    // Trigger confetti when all albums appear\n                    confetti({\n                        particleCount: 150,\n                        spread: 100,\n                        origin: { x: 0.5, y: 0.5 },\n                        colors: ['#FFB6C1', '#FF69B4', '#FF1493'],\n                        disableForReducedMotion: true\n                    });\n                }, 600);\n            }, 600);\n        }, 300);\n    });\n</script>\n\n<StandardLayout>\n    {#snippet header()}\n        <Header \n            title=\"Your Top 3\"\n            subtitle=\"Your favorite albums and songs\" />\n    {/snippet}\n\n    <div class=\"flex-1 p-6\">\n        {#if mounted}\n            <div class=\"results-container\">\n                {#if showAlbum1}\n                    <div class=\"album-result\" in:fly={{y: 20, duration: 400, delay: 100}}>\n                        <div class=\"heart-badge\">\n                            <svg xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 24 24\" fill=\"currentColor\" class=\"heart-icon\">\n                                <path d=\"M11.645 20.91l-.007-.003-.022-.012a15.247 15.247 0 01-.383-.218 25.18 25.18 0 01-4.244-3.17C4.688 15.36 2.25 12.174 2.25 8.25 2.25 5.322 4.714 3 7.688 3A5.5 5.5 0 0112 5.052 5.5 5.5 0 0116.313 3c2.973 0 5.437 2.322 5.437 5.25 0 3.925-2.438 7.111-4.739 9.256a25.175 25.175 0 01-4.244 3.17 15.247 15.247 0 01-.383.219l-.022.012-.007.004-.003.001a.752.752 0 01-.704 0l-.003-.001z\" />\n                            </svg>\n                            <span class=\"heart-number\">1</span>\n                        </div>\n                        <div class=\"album-container\" transition:fade={{duration: 300}}>\n                            <div class=\"album-display\">\n                                <VinylRecord\n                                    coverArt={music.selectedAlbums[0].coverArt}\n                                    title={music.selectedAlbums[0].title}\n                                    selected={true}\n                                    selectionNumber={1}\n                                    badgePosition=\"none\"\n                                    showSelectionOverlay={false}\n                                    showGrooves={true}\n                                    class_=\"results-vinyl\"\n                                />\n                                <div class=\"song-list\">\n                                    <ul class=\"songs\">\n                                        {#each music.selectedSongsByAlbum.get(music.selectedAlbums[0].id) || [] as song, i}\n                                            <div class=\"song-wrapper\">\n                                                <span class=\"song-rank\" style=\"color: {music.selectedAlbums[0].color}\">{i + 1}</span>\n                                                <li class=\"song-item\" style=\"background-color: {music.selectedAlbums[0].color}; color: {isColorLight(music.selectedAlbums[0].color) ? '#000' : '#fff'}\">\n                                                    {song}\n                                                </li>\n                                            </div>\n                                        {/each}\n                                    </ul>\n                                </div>\n                            </div>\n                        </div>\n                    </div>\n                {/if}\n\n                {#if showAlbum2}\n                    <div class=\"album-result\" in:fly={{y: 20, duration: 400, delay: 300}}>\n                        <div class=\"heart-badge\">\n                            <svg xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 24 24\" fill=\"currentColor\" class=\"heart-icon\">\n                                <path d=\"M11.645 20.91l-.007-.003-.022-.012a15.247 15.247 0 01-.383-.218 25.18 25.18 0 01-4.244-3.17C4.688 15.36 2.25 12.174 2.25 8.25 2.25 5.322 4.714 3 7.688 3A5.5 5.5 0 0112 5.052 5.5 5.5 0 0116.313 3c2.973 0 5.437 2.322 5.437 5.25 0 3.925-2.438 7.111-4.739 9.256a25.175 25.175 0 01-4.244 3.17 15.247 15.247 0 01-.383.219l-.022.012-.007.004-.003.001a.752.752 0 01-.704 0l-.003-.001z\" />\n                            </svg>\n                            <span class=\"heart-number\">2</span>\n                        </div>\n                        <div class=\"album-container\" transition:fade={{duration: 300}}>\n                            <div class=\"album-display\">\n                                <VinylRecord\n                                    coverArt={music.selectedAlbums[1].coverArt}\n                                    title={music.selectedAlbums[1].title}\n                                    selected={true}\n                                    selectionNumber={2}\n                                    badgePosition=\"none\"\n                                    showSelectionOverlay={false}\n                                    showGrooves={true}\n                                    class_=\"results-vinyl\"\n                                />\n                                <div class=\"song-list\">\n                                    <ul class=\"songs\">\n                                        {#each music.selectedSongsByAlbum.get(music.selectedAlbums[1].id) || [] as song, i}\n                                            <div class=\"song-wrapper\">\n                                                <span class=\"song-rank\" style=\"color: {music.selectedAlbums[1].color}\">{i + 1}</span>\n                                                <li class=\"song-item\" style=\"background-color: {music.selectedAlbums[1].color}; color: {isColorLight(music.selectedAlbums[1].color) ? '#000' : '#fff'}\">\n                                                    {song}\n                                                </li>\n                                            </div>\n                                        {/each}\n                                    </ul>\n                                </div>\n                            </div>\n                        </div>\n                    </div>\n                {/if}\n\n                {#if showAlbum3}\n                    <div class=\"album-result\" in:fly={{y: 20, duration: 400, delay: 500}}>\n                        <div class=\"heart-badge\">\n                            <svg xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 24 24\" fill=\"currentColor\" class=\"heart-icon\">\n                                <path d=\"M11.645 20.91l-.007-.003-.022-.012a15.247 15.247 0 01-.383-.218 25.18 25.18 0 01-4.244-3.17C4.688 15.36 2.25 12.174 2.25 8.25 2.25 5.322 4.714 3 7.688 3A5.5 5.5 0 0112 5.052 5.5 5.5 0 0116.313 3c2.973 0 5.437 2.322 5.437 5.25 0 3.925-2.438 7.111-4.739 9.256a25.175 25.175 0 01-4.244 3.17 15.247 15.247 0 01-.383.219l-.022.012-.007.004-.003.001a.752.752 0 01-.704 0l-.003-.001z\" />\n                            </svg>\n                            <span class=\"heart-number\">3</span>\n                        </div>\n                        <div class=\"album-container\" transition:fade={{duration: 300}}>\n                            <div class=\"album-display\">\n                                <VinylRecord\n                                    coverArt={music.selectedAlbums[2].coverArt}\n                                    title={music.selectedAlbums[2].title}\n                                    selected={true}\n                                    selectionNumber={3}\n                                    badgePosition=\"none\"\n                                    showSelectionOverlay={false}\n                                    showGrooves={true}\n                                    class_=\"results-vinyl\"\n                                />\n                                <div class=\"song-list\">\n                                    <ul class=\"songs\">\n                                        {#each music.selectedSongsByAlbum.get(music.selectedAlbums[2].id) || [] as song, i}\n                                            <div class=\"song-wrapper\">\n                                                <span class=\"song-rank\" style=\"color: {music.selectedAlbums[2].color}\">{i + 1}</span>\n                                                <li class=\"song-item\" style=\"background-color: {music.selectedAlbums[2].color}; color: {isColorLight(music.selectedAlbums[2].color) ? '#000' : '#fff'}\">\n                                                    {song}\n                                                </li>\n                                            </div>\n                                        {/each}\n                                    </ul>\n                                </div>\n                            </div>\n                        </div>\n                    </div>\n                {/if}\n            </div>\n        {/if}\n    </div>\n\n    {#snippet footer()}\n        <Footer variant=\"button\" >\n            <Button \n                variant=\"primary\"\n                on:click={handleProceed}\n            >\n                Proceed\n            </Button>\n        </Footer>\n    {/snippet}\n</StandardLayout>\n\n<style>\n    .results-container {\n        display: flex;\n        flex-direction: column;\n        gap: var(--grid-gap-sm, 1rem);\n        max-width: var(--container-max-width, 32rem);\n        margin: 0 auto;\n    }\n\n    .album-container {\n        background: white;\n        border-radius: var(--radius-lg, 1rem);\n        padding: 0.75rem;\n        box-shadow: var(--shadow-md, 0 4px 6px -1px rgba(0, 0, 0, 0.1), 0 2px 4px -1px rgba(0, 0, 0, 0.06));\n        transition: transform var(--duration-fast, 0.15s) var(--timing-function, ease-out);\n        touch-action: manipulation;\n    }\n\n    .album-container:active {\n        transform: scale(0.99);\n    }\n\n    .album-display {\n        display: flex;\n        gap: 0.75rem;\n        align-items: center;\n        position: relative;\n    }\n\n    :global(.results-vinyl) {\n        width: 120px;\n        height: 120px;\n        flex-shrink: 0;\n    }\n\n    .song-list {\n        flex-grow: 1;\n        max-height: 120px;\n        overflow-y: auto;\n    }\n\n    .song-wrapper {\n        display: flex;\n        align-items: center;\n        gap: var(--space-1, 0.25rem);\n        margin-bottom: 0.125rem;\n    }\n\n    .song-rank {\n        font-size: 0.8rem;\n        min-width: 1rem;\n        text-align: right;\n    }\n\n    .song-item {\n        padding: var(--space-1, 0.2rem) var(--space-2, 0.375rem);\n        border-radius: var(--radius-md, 0.5rem);\n        font-size: 0.9rem;\n        transition: transform var(--duration-fast, 0.15s) var(--timing-function, ease-out);\n        touch-action: manipulation;\n        -webkit-tap-highlight-color: rgba(0, 0, 0, 0.1);\n        white-space: nowrap;\n        overflow: hidden;\n        text-overflow: ellipsis;\n        flex: 1;\n    }\n\n    .song-item:active {\n        transform: scale(0.98);\n    }\n\n    .songs {\n        list-style: none;\n        padding: 0;\n        margin: 0;\n    }\n\n    @keyframes heartbeat {\n        0% { transform: scale(1); }\n        14% { transform: scale(1.1); }\n        28% { transform: scale(1); }\n        42% { transform: scale(1.1); }\n        70% { transform: scale(1); }\n    }\n\n    .heart-badge {\n        position: absolute;\n        top: -1rem;\n        left: -1rem;\n        width: 3.6rem;\n        height: 3.6rem;\n        display: flex;\n        align-items: center;\n        justify-content: center;\n        z-index: var(--z-overlay, 30);\n        filter: drop-shadow(0 2px 4px rgba(0, 0, 0, 0.3));\n        animation: heartbeat var(--duration-medium, 2s) ease-in-out infinite;\n    }\n\n    .heart-icon {\n        position: absolute;\n        width: 100%;\n        height: 100%;\n        color: var(--color-primary, rgb(244, 63, 94));\n    }\n\n    .heart-number {\n        position: relative;\n        color: var(--text-light, white);\n        font-weight: bold;\n        font-size: 1.25rem;\n        z-index: 11;\n        text-shadow: 0 1px 2px rgba(0, 0, 0, 0.4);\n    }\n\n    .album-result {\n        position: relative;\n    }\n</style>"
    },
    {
      "file": "src/lib/components/BottomNav.svelte",
      "action": "update",
      "content": "<script lang=\"ts\">\n    import { page } from '$app/stores';\n    import { base } from '$app/paths';\n    \n    const navItems = [\n        { path: `${base}/feed`, label: 'Feed', icon: 'feed' },\n        { path: `${base}/swiftivities`, label: 'Swiftivities', icon: 'swiftivities' },\n        { path: `${base}/profile`, label: 'Profile', icon: 'profile' },\n        { path: `${base}/about`, label: 'About', icon: 'about' }\n    ];\n\n    let currentPath = $derived($page.url.pathname);\n    let currentPathWithoutBase = $derived(currentPath.replace(base, ''));\n</script>\n\n<nav class=\"bottom-nav\">\n    <div class=\"nav-items\">\n        {#each navItems as { path, label, icon }}\n            <a \n                href={path} \n                class=\"nav-item {currentPathWithoutBase === path.replace(base, '') ? 'active' : ''}\"\n                data-sveltekit-preload-data=\"hover\"\n            >\n                <svg xmlns=\"http://www.w3.org/2000/svg\" class=\"h-6 w-6\" fill=\"none\" viewBox=\"0 0 24 24\" stroke=\"currentColor\">\n                    {#if icon === 'feed'}\n                        <path stroke-linecap=\"round\" stroke-linejoin=\"round\" stroke-width=\"2\" d=\"M19 20H5a2 2 0 01-2-2V6a2 2 0 012-2h10a2 2 0 012 2v1M19 20a2 2 0 002-2V8a2 2 0 00-2-2h-1M9 15L5 11m0 0l4-4m-4 4h14\" />\n                    {:else if icon === 'swiftivities'}\n                        <path stroke-linecap=\"round\" stroke-linejoin=\"round\" stroke-width=\"2\" d=\"M14.752 11.168l-3.197-2.132A1 1 0 0010 9.87v4.263a1 1 0 001.555.832l3.197-2.132a1 1 0 000-1.664z\" />\n                        <path stroke-linecap=\"round\" stroke-linejoin=\"round\" stroke-width=\"2\" d=\"M21 12a9 9 0 11-18 0 9 9 0 0118 0z\" />\n                    {:else if icon === 'profile'}\n                        <path stroke-linecap=\"round\" stroke-linejoin=\"round\" stroke-width=\"2\" d=\"M16 7a4 4 0 11-8 0 4 4 0 018 0zM12 14a7 7 0 00-7 7h14a7 7 0 00-7-7z\" />\n                    {:else if icon === 'about'}\n                        <path stroke-linecap=\"round\" stroke-linejoin=\"round\" stroke-width=\"2\" d=\"M13 16h-1v-4h-1m1-4h.01M21 12a9 9 0 11-18 0 9 9 0 0118 0z\" />\n                    {/if}\n                </svg>\n                <span class=\"nav-label\">{label}</span>\n            </a>\n        {/each}\n    </div>\n</nav>\n\n<style>\n    .bottom-nav {\n        position: fixed;\n        bottom: 0;\n        left: 0;\n        right: 0;\n        background: white;\n        border-top: 1px solid var(--bg-gradient-end, rgb(254, 205, 211));\n        height: var(--footer-height, 4rem);\n        max-width: var(--container-max-width, 448px);\n        margin: 0 auto;\n        z-index: var(--z-footer, 10);\n    }\n\n    .nav-items {\n        display: flex;\n        justify-content: space-around;\n        align-items: center;\n        height: 100%;\n        padding: 0 var(--spacing-footer, 1rem);\n    }\n\n    .nav-item {\n        display: flex;\n        flex-direction: column;\n        align-items: center;\n        justify-content: center;\n        color: var(--text-secondary, rgb(156, 163, 175));\n        text-decoration: none;\n        transition: color var(--duration-fast, 0.2s) var(--timing-function, ease-out);\n        position: relative;\n        padding: var(--space-2, 0.5rem);\n    }\n\n    .nav-item:before {\n        content: '';\n        position: absolute;\n        inset: 0;\n        border-radius: var(--radius-full, 9999px);\n        background: currentColor;\n        opacity: 0;\n        transition: opacity var(--duration-fast, 0.2s) var(--timing-function, ease-out);\n    }\n\n    .nav-item:active:before {\n        opacity: 0.1;\n    }\n\n    .nav-item.active {\n        color: var(--color-primary, rgb(244, 63, 94));\n    }\n\n    .nav-label {\n        font-size: 0.75rem;\n        margin-top: var(--space-1, 0.25rem);\n    }\n</style>"
    },
    {
      "file": "src/routes/+layout.svelte",
      "action": "update",
      "content": "<script lang=\"ts\">\n    import '../app.css';\n    import { page } from '$app/stores';\n    import { setContext } from 'svelte';\n    import { base } from '$app/paths';\n    import { createMusicContext } from '$lib/context/music.svelte';\n    import { createAppContext } from '$lib/context/app.svelte';\n    import BottomNav from '$lib/components/BottomNav.svelte';\n    import StandardLayout from '$lib/components/layout/StandardLayout.svelte';\n    \n    interface Props {\n        children?: import('svelte').Snippet;\n    }\n\n    let { children }: Props = $props();\n\n    // Create and provide the music context\n    const musicContext = createMusicContext();\n    setContext('music', () => musicContext);\n    \n    // Create and provide the app context\n    const appContext = createAppContext();\n    setContext('app', () => appContext);\n    \n    // Determine if we should show the bottom nav\n    // Show it for main app pages, hide it for onboarding\n    const isOnboardingPath = $derived(() => {\n        return $page.url.pathname.includes('/albums') || $page.url.pathname === `${base}/`;\n    });\n</script>\n\n<StandardLayout>\n    <div class:pb-16={!isOnboardingPath}>\n        {@render children?.()}\n    </div>\n    {#if !isOnboardingPath}\n        <BottomNav />\n    {/if}\n</StandardLayout>\n\n<style>\n    :global(html) {\n        background-color: rgb(226, 232, 240);\n        height: 100%;\n    }\n\n    :global(body) {\n        height: 100%;\n        margin: 0;\n        font-family: system-ui, -apple-system, BlinkMacSystemFont, 'Segoe UI', Roboto, Oxygen, Ubuntu, Cantarell, 'Open Sans', 'Helvetica Neue', sans-serif;\n    }\n</style>"
    },
    {
      "file": "src/lib/context/app.svelte.ts",
      "action": "create",
      "content": "/**\n * Main application context for managing app-wide state\n */\n\nexport type AppStatus = 'onboarding' | 'authenticated' | 'guest';\nexport type SubscriptionType = 'free' | 'premium';\n\nexport interface AppState {\n    status: AppStatus;\n    hasCompletedOrientation: boolean;\n    subscription: SubscriptionType;\n}\n\nexport function createAppContext() {\n    // Core state\n    const state = $state<AppState>({\n        status: 'onboarding',\n        hasCompletedOrientation: false,\n        subscription: 'free'\n    });\n\n    // Methods\n    function completeOrientation() {\n        state.hasCompletedOrientation = true;\n        state.status = 'guest';\n    }\n\n    function setAuthenticated() {\n        state.status = 'authenticated';\n    }\n\n    function setGuest() {\n        state.status = 'guest';\n    }\n\n    function setPremium() {\n        state.subscription = 'premium';\n    }\n\n    function setFree() {\n        state.subscription = 'free';\n    }\n\n    function reset() {\n        state.status = 'onboarding';\n        state.hasCompletedOrientation = false;\n        state.subscription = 'free';\n    }\n\n    // Return read-only access to state and methods\n    return {\n        get state() { return state; },\n        completeOrientation,\n        setAuthenticated,\n        setGuest,\n        setPremium,\n        setFree,\n        reset\n    };\n}\n\n// Type for the context return value\nexport type AppContext = ReturnType<typeof createAppContext>;"
    }
  ]
}