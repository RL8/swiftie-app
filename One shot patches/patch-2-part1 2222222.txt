{
  "patches": [
    {
      "file": "src/routes/profile/+page.svelte",
      "action": "update",
      "content": "<script lang=\"ts\">
    import { getContext } from 'svelte';
    import StandardLayout from '$lib/components/layout/StandardLayout.svelte';
    import Header from '$lib/components/layout/Header.svelte';
    import Button from '$lib/components/Button/Button.svelte';
    import type { UserProfileContext } from '$lib/types/user';
    
    const userProfile = getContext<UserProfileContext>('userProfile');

    // Determine profile state
    $: profileState = userProfile.getProfileState();
</script>

<StandardLayout>
    {#snippet header()}
        <Header 
            title={profileState === 'unregistered' 
                ? 'Join the Swiftie Community' 
                : 'Your Swiftie Profile'}
            subtitle={profileState === 'unregistered' 
                ? 'Create your personalized experience' 
                : 'Manage your Swiftie stats'} 
        />
    {/snippet}

    {#if profileState === 'unregistered'}
        <div class=\"unregistered-profile\">
            <div class=\"profile-icon\">üéµ</div>
            <h2>Unlock Your Full Swiftie Experience</h2>
            <p>Connect with Reddit to create your personalized profile and track your Taylor Swift journey.</p>
            <Button 
                variant=\"primary\" 
                on:click={userProfile.initiateRedditAuth}
                fullWidth={true}
            >
                Connect with Reddit
            </Button>
        </div>
    {:else if profileState === 'free'}
        <div class=\"free-profile\">
            <div class=\"profile-summary\">
                <div class=\"profile-icon\">üë§</div>
                <h3>{userProfile.username}</h3>
                <div class=\"stats-grid\">
                    <div class=\"stat-item\">
                        <span class=\"stat-label\">Albums Rated</span>
                        <span class=\"stat-value\">{userProfile.albumsRated}</span>
                    </div>
                    <div class=\"stat-item\">
                        <span class=\"stat-label\">Lists Created</span>
                        <span class=\"stat-value\">{userProfile.listsCreated}</span>
                    </div>
                </div>
            </div>
            
            <div class=\"upgrade-section\">
                <h4>Upgrade to Premium</h4>
                <p>Unlock full Swiftie features for just $13.13/year!</p>
                <Button 
                    variant=\"primary\"
                    on:click={userProfile.initiateUpgrade}
                    fullWidth={true}
                >
                    Upgrade Now
                </Button>
            </div>
        </div>
    {:else if profileState === 'premium'}
        <div class=\"premium-profile\">
            <div class=\"profile-header\">
                <div class=\"profile-icon premium\">üëë</div>
                <h3>{userProfile.username}</h3>
                <span class=\"premium-badge\">Premium Swiftie</span>
            </div>
            
            <div class=\"premium-features\">
                <div class=\"feature-grid\">
                    <div class=\"feature-item\">
                        <span class=\"feature-icon\">üèÜ</span>
                        <span class=\"feature-label\">Unlimited Lists</span>
                    </div>
                    <div class=\"feature-item\">
                        <span class=\"feature-icon\">üîç</span>
                        <span class=\"feature-label\">Advanced Analytics</span>
                    </div>
                    <div class=\"feature-item\">
                        <span class=\"feature-icon\">üåà</span>
                        <span class=\"feature-label\">Custom Themes</span>
                    </div>
                </div>
            </div>
        </div>
    {/if}
</StandardLayout>

<style>
    .unregistered-profile, 
    .free-profile, 
    .premium-profile {
        display: flex;
        flex-direction: column;
        align-items: center;
        padding: 1rem;
        text-align: center;
    }

    .profile-icon {
        font-size: 4rem;
        margin-bottom: 1rem;
    }

    .stats-grid, .feature-grid {
        display: grid;
        grid-template-columns: repeat(2, 1fr);
        gap: 0.5rem;
        margin-top: 1rem;
    }

    .stat-item, .feature-item {
        background: rgba(255,255,255,0.1);
        padding: 0.5rem;
        border-radius: 0.5rem;
        display: flex;
        flex-direction: column;
    }

    .premium-badge {
        background: var(--color-primary);
        color: white;
        padding: 0.25rem 0.5rem;
        border-radius: 9999px;
        font-size: 0.8rem;
    }
</style>"
    },
    {
      "file": "src/lib/types/user.ts",
      "action": "update",
      "content": "export type ProfileState = 'unregistered' | 'free' | 'premium';

export interface UserProfile {
    username: string;
    email?: string;
    profileState: ProfileState;
    albumsRated: number;
    listsCreated: number;
    lastLogin?: Date;
    redditUsername?: string;
}

export interface UserProfileContext {
    getProfileState(): ProfileState;
    initiateRedditAuth(): Promise<void>;
    initiateUpgrade(): Promise<void>;
    username: string;
    listsCreated: number;
    albumsRated: number;
}"
    },
    {
      "file": "src/lib/context/user.svelte.ts",
      "action": "create",
      "content": "import type { UserProfile, ProfileState } from '$lib/types/user';

export function createUserProfileContext() {
    // Initialize user profile state
    const profile = $state<UserProfile>({
        username: '',
        profileState: 'unregistered',
        albumsRated: 0,
        listsCreated: 0
    });

    // Methods for managing user profile
    function getProfileState(): ProfileState {
        return profile.profileState;
    }

    async function initiateRedditAuth() {
        // TODO: Implement Reddit OAuth flow
        // Placeholder implementation
        profile.profileState = 'free';
        profile.username = 'SwiftFan123';
        profile.redditUsername = 'swift_enthusiast';
    }

    async function initiateUpgrade() {
        // TODO: Implement payment flow
        // Placeholder implementation
        profile.profileState = 'premium';
    }

    return {
        get username() { return profile.username; },
        get listsCreated() { return profile.listsCreated; },
        get albumsRated() { return profile.albumsRated; },
        getProfileState,
        initiateRedditAuth,
        initiateUpgrade
    };
}"
    },
    {
      "file": "src/routes/auth/reddit/+page.svelte",
      "action": "create",
      "content": "<script lang=\"ts\">
    import { onMount } from 'svelte';
    import { goto } from '$app/navigation';
    import StandardLayout from '$lib/components/layout/StandardLayout.svelte';
    import Header from '$lib/components/layout/Header.svelte';

    let authStatus = $state('processing');
    let errorMessage = $state('');

    onMount(async () => {
        try {
            // Extract authorization code from URL
            const urlParams = new URLSearchParams(window.location.search);
            const code = urlParams.get('code');

            if (!code) {
                throw new Error('No authorization code found');
            }

            // TODO: Implement actual Reddit OAuth token exchange
            // Placeholder implementation
            await new Promise(resolve => setTimeout(resolve, 1500));
            
            authStatus = 'success';
            
            // Redirect to profile after successful authentication
            setTimeout(() => {
                goto('/profile');
            }, 1000);
        } catch (error) {
            authStatus = 'error';
            errorMessage = error instanceof Error ? error.message : 'Authentication failed';
        }
    });
</script>

<StandardLayout>
    {#snippet header()}
        <Header 
            title={authStatus === 'processing' 
                ? 'Connecting...' 
                : (authStatus === 'success' 
                    ? 'Authentication Successful' 
                    : 'Authentication Failed')}
            subtitle={authStatus === 'processing' 
                ? 'Verifying your Reddit account' 
                : (authStatus === 'success' 
                    ? 'Welcome to the Swiftie community!' 
                    : 'Please try again')} 
        />
    {/snippet}

    <div class=\"auth-container\">
        {#if authStatus === 'processing'}
            <div class=\"loading-spinner\">üéµ</div>
        {:else if authStatus === 'success'}
            <div class=\"success-icon\">‚úÖ</div>
            <p>Welcome to the Taylor Swift Fan App!</p>
        {:else}
            <div class=\"error-icon\">‚ùå</div>
            <p>{errorMessage}</p>
        {/if}
    </div>

<style>
    .auth-container {
        display: flex;
        flex-direction: column;
        align-items: center;
        justify-content: center;
        height: 100%;
        text-align: center;
        padding: 1rem;
    }

    .loading-spinner, .success-icon, .error-icon {
        font-size: 4rem;
        margin-bottom: 1rem;
        animation: pulse 1.5s infinite;
    }

    @keyframes pulse {
        0%, 100% { transform: scale(1); }
        50% { transform: scale(1.1); }
    }
</style>"
    }
  ]
}